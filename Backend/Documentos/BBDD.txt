-- Crear función para actualizar fecha_modificacion automáticamente
CREATE OR REPLACE FUNCTION update_fecha_modificacion_column()
    RETURNS TRIGGER AS $$
BEGIN
    -- Solo actualiza si la columna existe en la tabla que disparó el trigger
    IF EXISTS (SELECT 1 FROM information_schema.columns WHERE table_schema = TG_TABLE_SCHEMA AND table_name = TG_TABLE_NAME AND column_name = 'fecha_modificacion') THEN
        NEW.fecha_modificacion = now();
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Crear ENUM Types (Tipos Enumerados)
DROP TYPE IF EXISTS checkpoint_tema_enum CASCADE;
CREATE TYPE checkpoint_tema_enum AS ENUM ('CLARO', 'OSCURO');

DROP TYPE IF EXISTS checkpoint_visibilidad_enum CASCADE;
CREATE TYPE checkpoint_visibilidad_enum AS ENUM ('PUBLICO', 'PRIVADO', 'SOLO_AMIGOS');

DROP TYPE IF EXISTS checkpoint_game_type_enum CASCADE;
CREATE TYPE checkpoint_game_type_enum AS ENUM ('JUEGO', 'DLC', 'EXPANSION');

DROP TYPE IF EXISTS checkpoint_status_enum CASCADE;
CREATE TYPE checkpoint_status_enum AS ENUM ('RELEASED', 'ALPHA', 'BETA', 'EARLY_ACCESS', 'OFFLINE', 'CANCELLED', 'RUMORED', 'DELISTED');

DROP TYPE IF EXISTS checkpoint_estado_juego_usuario_enum CASCADE;
CREATE TYPE checkpoint_estado_juego_usuario_enum AS ENUM (
    'COMPLETADO_NO_SELECCIONAR', 'COMPLETADO_HISTORIA', 'COMPLETADO_HISTORIA_SECUNDARIAS', 'COMPLETADO_100',
    'ARCHIVADO_NO_SELECCIONAR', 'ARCHIVADO_ABANDONADO', 'ARCHIVADO_NO_JUGANDO',
    'DESEADO',
    'JUGANDO_NO_SELECCIONAR', 'JUGANDO_PAUSADO', 'JUGANDO_INFINITO'
    );

DROP TYPE IF EXISTS checkpoint_estado_amistad_enum CASCADE;
CREATE TYPE checkpoint_estado_amistad_enum AS ENUM ('PENDIENTE', 'ACEPTADA', 'RECHAZADA', 'BLOQUEADA');

DROP TYPE IF EXISTS checkpoint_juego_relacion_tipo_enum CASCADE;
CREATE TYPE checkpoint_juego_relacion_tipo_enum AS ENUM ('DLC', 'EXPANSION', 'SIMILAR');


-- === TABLAS PRINCIPALES ===

CREATE TABLE IF NOT EXISTS usuario (
                                       id BIGSERIAL PRIMARY KEY,
                                       public_id UUID UNIQUE NOT NULL DEFAULT gen_random_uuid(),
                                       nombre_usuario VARCHAR(100) UNIQUE NOT NULL,
                                       email VARCHAR(255) UNIQUE NOT NULL,
                                       contraseña VARCHAR(255) NOT NULL, -- Hash
                                       fecha_registro TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
    -- Atributos de PerfilUsuario integrados --
                                       tema checkpoint_tema_enum NOT NULL DEFAULT 'CLARO',
                                       foto_perfil TEXT, -- Ruta a la imagen
                                       notificaciones BOOLEAN NOT NULL DEFAULT TRUE,
                                       visibilidad_perfil checkpoint_visibilidad_enum NOT NULL DEFAULT 'PUBLICO',
    -- Fechas de auditoría --
                                       fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                       fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                       fecha_eliminacion TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS plataforma (
                                          id BIGSERIAL PRIMARY KEY,
                                          id_igdb INT UNIQUE, -- ID de IGDB, puede ser NULL si es plataforma solo interna
                                          nombre VARCHAR(255) NOT NULL,
                                          nombre_alternativo VARCHAR(255),
                                          logo_url TEXT, -- URL
    -- Fechas de auditoría --
                                          fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                          fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                          fecha_eliminacion TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS juego (
                                     id BIGSERIAL PRIMARY KEY,
                                     id_igdb BIGINT UNIQUE NOT NULL, -- ID externo IGDB
                                     nombre VARCHAR(500) NOT NULL,
                                     slug VARCHAR(500) UNIQUE NOT NULL,
                                     game_type checkpoint_game_type_enum NOT NULL,
                                     resumen TEXT,
                                     historia TEXT,
                                     total_rating REAL CHECK (total_rating IS NULL OR (total_rating >= 0 AND total_rating <= 100)), -- Puntuación IGDB
                                     total_rating_count INT CHECK (total_rating_count IS NULL OR total_rating_count >=0), -- Votos IGDB
                                     fecha_lanzamiento DATE,
                                     cover_url TEXT, -- URL
                                     motor_grafico TEXT, -- Nombre o CSV
                                     franquicia TEXT, -- Nombre
                                     status checkpoint_status_enum NOT NULL,
    -- Fechas de auditoría --
                                     fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                     fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                     fecha_eliminacion TIMESTAMPTZ
);

-- === TABLAS DE DATOS RELACIONADOS A IGDB / CATÁLOGOS ===

CREATE TABLE IF NOT EXISTS genero (
                                      id BIGSERIAL PRIMARY KEY,
                                      id_igdb BIGINT UNIQUE NOT NULL, -- ID externo IGDB
                                      nombre VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS compania (
                                        id BIGSERIAL PRIMARY KEY,
                                        id_igdb BIGINT UNIQUE NOT NULL, -- ID externo IGDB
                                        nombre VARCHAR(255) NOT NULL,
                                        developer BOOLEAN DEFAULT FALSE,
                                        publisher BOOLEAN DEFAULT FALSE,
                                        porting BOOLEAN DEFAULT FALSE,
                                        supporting BOOLEAN DEFAULT FALSE
);

CREATE TABLE IF NOT EXISTS keyword (
                                       id BIGSERIAL PRIMARY KEY,
                                       id_igdb BIGINT UNIQUE NOT NULL, -- ID externo IGDB
                                       nombre VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS modo_juego (
                                         id BIGSERIAL PRIMARY KEY,
                                         id_igdb BIGINT UNIQUE NOT NULL, -- ID externo IGDB
                                         nombre VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS artwork (
                                       id BIGSERIAL PRIMARY KEY,
                                       juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                       id_igdb_image_id VARCHAR(255) UNIQUE, -- ID de imagen de IGDB
                                       url TEXT NOT NULL -- URL
);

CREATE TABLE IF NOT EXISTS video (
                                     id BIGSERIAL PRIMARY KEY,
                                     juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                     id_igdb_video_id VARCHAR(255) UNIQUE, -- ID de video de IGDB
                                     nombre VARCHAR(255),
                                     video_id VARCHAR(255) NOT NULL -- ID del video en la plataforma (ej. YouTube)
);

CREATE TABLE IF NOT EXISTS web (
                                   id BIGSERIAL PRIMARY KEY,
                                   juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                   id_igdb_website_id BIGINT UNIQUE, -- ID de website de IGDB
                                   categoria INT, -- Tipo de web según IGDB (official, wikia, wikipedia, etc.)
                                   url TEXT NOT NULL, -- URL
                                   trusted BOOLEAN DEFAULT FALSE -- Indicador de confianza de IGDB
);

CREATE TABLE IF NOT EXISTS idioma (
                                      id BIGSERIAL PRIMARY KEY,
                                      id_igdb_language_id BIGINT UNIQUE, -- ID de idioma de IGDB
                                      nombre VARCHAR(100) UNIQUE NOT NULL,
                                      locale VARCHAR(10) UNIQUE -- ej. 'en', 'es', 'fr'
);

CREATE TABLE IF NOT EXISTS tema ( -- Tema de IGDB (Acción, Fantasía, etc.)
                                    id BIGSERIAL PRIMARY KEY,
                                    id_igdb_theme_id BIGINT UNIQUE NOT NULL, -- ID de tema de IGDB
                                    nombre VARCHAR(255) UNIQUE NOT NULL
);

-- === TABLAS DE RELACIÓN USUARIO-JUEGO Y OTROS DATOS CALCULADOS ===

CREATE TABLE IF NOT EXISTS juego_usuario (
                                            id BIGSERIAL PRIMARY KEY,
                                            usuario_id BIGINT NOT NULL REFERENCES usuario(id) ON DELETE CASCADE,
                                            juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                            plataforma_id BIGINT REFERENCES plataforma(id) ON DELETE SET NULL, -- Referencia a nuestra tabla Plataforma
                                            estado checkpoint_estado_juego_usuario_enum NOT NULL DEFAULT 'DESEADO',
                                            posesion BOOLEAN NOT NULL DEFAULT FALSE,
                                            puntuacion REAL CHECK (puntuacion IS NULL OR (puntuacion >= 0 AND puntuacion <= 10)), -- Ajusta el rango si es necesario (ej. 0-5 estrellas)
                                            comentario TEXT,
                                            comentario_privado TEXT,
                                            fecha_inicio DATE,
                                            fecha_fin DATE,
                                            duracion_historia REAL CHECK (duracion_historia IS NULL OR duracion_historia >= 0), -- Horas
                                            duracion_historia_secundarias REAL CHECK (duracion_historia_secundarias IS NULL OR duracion_historia_secundarias >= 0), -- Horas
                                            duracion_completista REAL CHECK (duracion_completista IS NULL OR duracion_completista >= 0), -- Horas
                                            importado BOOLEAN NOT NULL DEFAULT FALSE,
    -- Fechas de auditoría --
                                            fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                            fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                            fecha_eliminacion TIMESTAMPTZ,
                                            UNIQUE (usuario_id, juego_id) -- Un usuario solo tiene una entrada por juego
);

CREATE TABLE IF NOT EXISTS duracion_juego (
                                             id_duracion BIGSERIAL PRIMARY KEY,
                                             juego_id BIGINT UNIQUE NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                             media_historia REAL CHECK (media_historia IS NULL OR media_historia >= 0),
                                             media_historia_secundarias REAL CHECK (media_historia_secundarias IS NULL OR media_historia_secundarias >= 0),
                                             media_completista REAL CHECK (media_completista IS NULL OR media_completista >= 0),
                                             numero_usuarios INT NOT NULL DEFAULT 0 CHECK (numero_usuarios >= 0),
                                             fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP -- Se actualiza cuando se recalculan las medias
);

CREATE TABLE IF NOT EXISTS ranking (
                                       juego_id BIGINT PRIMARY KEY REFERENCES juego(id) ON DELETE CASCADE, -- PK es juego_id (Relación 1:1)
                                       puntuacion_media REAL CHECK (puntuacion_media IS NULL OR (puntuacion_media >= 0 AND puntuacion_media <= 10)), -- Puntuación media de CheckPoint
                                       numero_votos INT NOT NULL DEFAULT 0 CHECK (numero_votos >= 0),
                                       fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP -- Se actualiza cuando cambian votos/puntuaciones
);

-- === LISTAS Y TIER LISTS ===

CREATE TABLE IF NOT EXISTS lista (
                                     id BIGSERIAL PRIMARY KEY,
                                     usuario_id BIGINT NOT NULL REFERENCES usuario(id) ON DELETE CASCADE,
                                     nombre VARCHAR(255) NOT NULL,
                                     fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                     fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                     fecha_eliminacion TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS tier_list (
                                        id BIGSERIAL PRIMARY KEY,
                                        usuario_id BIGINT NOT NULL REFERENCES usuario(id) ON DELETE CASCADE,
                                        nombre VARCHAR(255) NOT NULL,
                                        fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                        fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP,
                                        fecha_eliminacion TIMESTAMPTZ
);

CREATE TABLE IF NOT EXISTS nivel_tier (
                                         id BIGSERIAL PRIMARY KEY,
                                         tier_list_id BIGINT NOT NULL REFERENCES tier_list(id) ON DELETE CASCADE,
                                         nombre VARCHAR(100) NOT NULL,
                                         orden INT NOT NULL CHECK (orden >= 0),
                                         color VARCHAR(7) CHECK (color IS NULL OR color ~ '^#[A-Fa-f0-9]{6}$'), -- Validar formato Hex
                                         descripcion TEXT,
                                         UNIQUE (tier_list_id, nombre), -- Nombre único por TierList
                                         UNIQUE (tier_list_id, orden) -- Orden único por TierList
);

-- === TABLAS INTERMEDIAS (JUNCTION TABLES) PARA RELACIONES N:M ===

CREATE TABLE IF NOT EXISTS juego_genero (
                                           juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                           genero_id BIGINT NOT NULL REFERENCES genero(id) ON DELETE CASCADE,
                                           PRIMARY KEY (juego_id, genero_id)
);

CREATE TABLE IF NOT EXISTS juego_compania (
                                             juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                             compania_id BIGINT NOT NULL REFERENCES compania(id) ON DELETE CASCADE,
                                             PRIMARY KEY (juego_id, compania_id)
);

CREATE TABLE IF NOT EXISTS juego_keyword (
                                            juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                            keyword_id BIGINT NOT NULL REFERENCES keyword(id) ON DELETE CASCADE,
                                            PRIMARY KEY (juego_id, keyword_id)
);

CREATE TABLE IF NOT EXISTS juego_modo_juego (
                                              juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                              modo_juego_id BIGINT NOT NULL REFERENCES modo_juego(id) ON DELETE CASCADE,
                                              PRIMARY KEY (juego_id, modo_juego_id)
);

CREATE TABLE IF NOT EXISTS juego_idioma_soporte (
                                                  juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                                  idioma_id BIGINT NOT NULL REFERENCES idioma(id) ON DELETE CASCADE,
                                                  tipo_soporte INT NOT NULL, -- 1=Interfaz, 2=Audio, 3=Subtítulos
                                                  PRIMARY KEY (juego_id, idioma_id, tipo_soporte)
);

CREATE TABLE IF NOT EXISTS juego_tema (
                                         juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                         tema_id BIGINT NOT NULL REFERENCES tema(id) ON DELETE CASCADE,
                                         PRIMARY KEY (juego_id, tema_id)
);

-- NUEVA TABLA DE UNIÓN Juego <-> Plataforma (interna)
CREATE TABLE IF NOT EXISTS juego_plataforma (
                                               juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                               plataforma_id BIGINT NOT NULL REFERENCES plataforma(id) ON DELETE CASCADE,
                                               PRIMARY KEY (juego_id, plataforma_id)
);

-- TABLA DE UNIÓN PARA RELACIONES Juego <-> Juego (DLC, Expansión, Similar)
CREATE TABLE IF NOT EXISTS juego_relacion (
                                             juego_origen_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE, -- Ej: Juego Base
                                             juego_destino_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE, -- Ej: DLC, Expansión, Juego Similar
                                             tipo_relacion checkpoint_juego_relacion_tipo_enum NOT NULL, -- 'DLC', 'EXPANSION', 'SIMILAR'
                                             PRIMARY KEY (juego_origen_id, juego_destino_id, tipo_relacion),
                                             CHECK (juego_origen_id <> juego_destino_id)
);

CREATE TABLE IF NOT EXISTS lista_juego (
                                          lista_id BIGINT NOT NULL REFERENCES lista(id) ON DELETE CASCADE,
                                          juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                          fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Fecha en que se añadió a la lista
                                          PRIMARY KEY (lista_id, juego_id)
);

CREATE TABLE IF NOT EXISTS tier_list_juego (
                                             tier_list_id BIGINT NOT NULL REFERENCES tier_list(id) ON DELETE CASCADE,
                                             juego_id BIGINT NOT NULL REFERENCES juego(id) ON DELETE CASCADE,
                                             nivel_tier_id BIGINT NOT NULL REFERENCES nivel_tier(id) ON DELETE CASCADE, -- Nivel asignado
                                             fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Fecha en que se añadió/movió a este nivel
                                             fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Para registrar cambios de nivel
                                             UNIQUE (tier_list_id, juego_id), -- Un juego solo puede estar una vez por tierlist
                                             PRIMARY KEY (tier_list_id, juego_id) -- O usar un ID propio si se prefiere y quitar el UNIQUE
);

-- TABLA AMISTAD MODIFICADA CON ESTADO
CREATE TABLE IF NOT EXISTS amistad (
                                       id BIGSERIAL PRIMARY KEY, -- Usar un ID propio facilita referencias y modificaciones
                                       usuario_solicitante_id BIGINT NOT NULL REFERENCES usuario(id) ON DELETE CASCADE,
                                       usuario_receptor_id BIGINT NOT NULL REFERENCES usuario(id) ON DELETE CASCADE,
                                       estado checkpoint_estado_amistad_enum NOT NULL DEFAULT 'PENDIENTE',
                                       fecha_creacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Fecha de creación solicitud/relación
                                       fecha_modificacion TIMESTAMPTZ NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Fecha de actualización de estado
                                       fecha_eliminacion TIMESTAMPTZ,
                                       UNIQUE (usuario_solicitante_id, usuario_receptor_id), -- Evita solicitudes duplicadas en la misma dirección
                                       CHECK (usuario_solicitante_id <> usuario_receptor_id)
);

-- === TRIGGERS para actualizar fecha_modificacion ===

-- Crear Triggers si no existen
DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_usuario_modtime' AND tgrelid = 'usuario'::regclass) THEN
        CREATE TRIGGER update_usuario_modtime BEFORE UPDATE ON usuario FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_plataforma_modtime' AND tgrelid = 'plataforma'::regclass) THEN
        CREATE TRIGGER update_plataforma_modtime BEFORE UPDATE ON plataforma FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_juego_modtime' AND tgrelid = 'juego'::regclass) THEN
        CREATE TRIGGER update_juego_modtime BEFORE UPDATE ON juego FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_juego_usuario_modtime' AND tgrelid = 'juego_usuario'::regclass) THEN
        CREATE TRIGGER update_juego_usuario_modtime BEFORE UPDATE ON juego_usuario FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_lista_modtime' AND tgrelid = 'lista'::regclass) THEN
        CREATE TRIGGER update_lista_modtime BEFORE UPDATE ON lista FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_tier_list_modtime' AND tgrelid = 'tier_list'::regclass) THEN
        CREATE TRIGGER update_tier_list_modtime BEFORE UPDATE ON tier_list FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_tier_list_juego_modtime' AND tgrelid = 'tier_list_juego'::regclass) THEN
        CREATE TRIGGER update_tier_list_juego_modtime BEFORE UPDATE ON tier_list_juego FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_amistad_modtime' AND tgrelid = 'amistad'::regclass) THEN
        CREATE TRIGGER update_amistad_modtime BEFORE UPDATE ON amistad FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_duracion_juego_modtime' AND tgrelid = 'duracion_juego'::regclass) THEN
        CREATE TRIGGER update_duracion_juego_modtime BEFORE UPDATE ON duracion_juego FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

DO $$ BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_ranking_modtime' AND tgrelid = 'ranking'::regclass) THEN
        CREATE TRIGGER update_ranking_modtime BEFORE UPDATE ON ranking FOR EACH ROW EXECUTE FUNCTION update_fecha_modificacion_column();
    END IF;
END $$;

-- === ÍNDICES ADICIONALES ===

-- Índices para Usuario
CREATE INDEX IF NOT EXISTS idx_usuario_email ON usuario(email);
CREATE INDEX IF NOT EXISTS idx_usuario_nombre_usuario ON usuario(nombre_usuario);
CREATE INDEX IF NOT EXISTS idx_usuario_fecha_eliminacion ON usuario(fecha_eliminacion);
CREATE INDEX IF NOT EXISTS idx_usuario_tema ON usuario(tema);
CREATE INDEX IF NOT EXISTS idx_usuario_visibilidad_perfil ON usuario(visibilidad_perfil);

-- Índices para Plataforma
CREATE INDEX IF NOT EXISTS idx_plataforma_id_igdb ON plataforma(id_igdb);
CREATE INDEX IF NOT EXISTS idx_plataforma_nombre ON plataforma(nombre);

-- Índices para Juego
CREATE INDEX IF NOT EXISTS idx_juego_id_igdb ON juego(id_igdb);
CREATE INDEX IF NOT EXISTS idx_juego_slug ON juego(slug);
CREATE INDEX IF NOT EXISTS idx_juego_nombre ON juego(nombre);
CREATE INDEX IF NOT EXISTS idx_juego_fecha_lanzamiento ON juego(fecha_lanzamiento);
CREATE INDEX IF NOT EXISTS idx_juego_game_type ON juego(game_type);
CREATE INDEX IF NOT EXISTS idx_juego_status ON juego(status);
CREATE INDEX IF NOT EXISTS idx_juego_motor_grafico ON juego(motor_grafico);
CREATE INDEX IF NOT EXISTS idx_juego_franquicia ON juego(franquicia);

-- Índices para Tablas de Catálogo (Genero, Compania, etc.)
CREATE INDEX IF NOT EXISTS idx_genero_id_igdb ON genero(id_igdb);
CREATE INDEX IF NOT EXISTS idx_compania_id_igdb ON compania(id_igdb);
CREATE INDEX IF NOT EXISTS idx_keyword_id_igdb ON keyword(id_igdb);
CREATE INDEX IF NOT EXISTS idx_modo_juego_id_igdb ON modo_juego(id_igdb);
CREATE INDEX IF NOT EXISTS idx_idioma_id_igdb ON idioma(id_igdb_language_id);
CREATE INDEX IF NOT EXISTS idx_tema_id_igdb ON tema(id_igdb_theme_id);

-- Índices para Tablas Relacionadas a Juego (Artwork, Video, Web)
CREATE INDEX IF NOT EXISTS idx_artwork_juego_id ON artwork(juego_id);
CREATE INDEX IF NOT EXISTS idx_video_juego_id ON video(juego_id);
CREATE INDEX IF NOT EXISTS idx_web_juego_id ON web(juego_id);

-- Índices para JuegoUsuario
CREATE INDEX IF NOT EXISTS idx_juego_usuario_usuario_id ON juego_usuario(usuario_id);
CREATE INDEX IF NOT EXISTS idx_juego_usuario_juego_id ON juego_usuario(juego_id);
CREATE INDEX IF NOT EXISTS idx_juego_usuario_plataforma_id ON juego_usuario(plataforma_id);
CREATE INDEX IF NOT EXISTS idx_juego_usuario_estado ON juego_usuario(estado);
CREATE INDEX IF NOT EXISTS idx_juego_usuario_puntuacion ON juego_usuario(puntuacion);

-- Índices para DuracionJuego y Ranking
CREATE INDEX IF NOT EXISTS idx_ranking_puntuacion_media ON ranking(puntuacion_media);

-- Índices para Listas y TierLists
CREATE INDEX IF NOT EXISTS idx_lista_usuario_id ON lista(usuario_id);
CREATE INDEX IF NOT EXISTS idx_tier_list_usuario_id ON tier_list(usuario_id);
CREATE INDEX IF NOT EXISTS idx_nivel_tier_tier_list_id ON nivel_tier(tier_list_id);

-- Índices para Tablas de Unión (Junction Tables)
CREATE INDEX IF NOT EXISTS idx_juego_genero_genero_id ON juego_genero(genero_id);
CREATE INDEX IF NOT EXISTS idx_juego_compania_compania_id ON juego_compania(compania_id);
CREATE INDEX IF NOT EXISTS idx_juego_keyword_keyword_id ON juego_keyword(keyword_id);
CREATE INDEX IF NOT EXISTS idx_juego_modo_juego_modo_juego_id ON juego_modo_juego(modo_juego_id);
CREATE INDEX IF NOT EXISTS idx_juego_idioma_soporte_idioma_id ON juego_idioma_soporte(idioma_id);
CREATE INDEX IF NOT EXISTS idx_juego_tema_tema_id ON juego_tema(tema_id);
CREATE INDEX IF NOT EXISTS idx_juego_plataforma_plataforma_id ON juego_plataforma(plataforma_id);
CREATE INDEX IF NOT EXISTS idx_juego_relacion_juego_destino_id ON juego_relacion(juego_destino_id);
CREATE INDEX IF NOT EXISTS idx_juego_relacion_tipo_relacion ON juego_relacion(tipo_relacion);
CREATE INDEX IF NOT EXISTS idx_lista_juego_juego_id ON lista_juego(juego_id);
CREATE INDEX IF NOT EXISTS idx_tier_list_juego_juego_id ON tier_list_juego(juego_id);
CREATE INDEX IF NOT EXISTS idx_tier_list_juego_nivel_tier_id ON tier_list_juego(nivel_tier_id);

-- Índices para Amistad (Actualizados)
CREATE INDEX IF NOT EXISTS idx_amistad_solicitante ON amistad(usuario_solicitante_id);
CREATE INDEX IF NOT EXISTS idx_amistad_receptor ON amistad(usuario_receptor_id);
CREATE INDEX IF NOT EXISTS idx_amistad_estado ON amistad(estado);