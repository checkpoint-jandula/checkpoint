spring.application.name=MyCheckPoint

# ==========================================
# CONFIGURACION DEL SERVIDOR
# ==========================================
# Puerto en el que correra la aplicacion Spring Boot
server.port=8080

# ==========================================
# CONFIGURACION DE LA BASE DE DATOS (PostgreSQL)
# ==========================================
# URL de conexion JDBC para PostgreSQL
# Reemplaza 'localhost', '5432', y 'checkpoint_db' con los valores correctos para tu entorno
# Asegurate de que la base de datos 'checkpoint_db' exista
spring.datasource.url=jdbc:postgresql://localhost:5432/checkpoint_db

# Nombre de usuario para la conexion a la base de datos
spring.datasource.username=mp

# Contrasena para la conexion a la base de datos
spring.datasource.password=admin

# Spring Boot puede inferir esto, pero es bueno ser explicito:
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
# Esta propiedad le dice a Hibernate como generar SQL especifico para PostgreSQL.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# ==========================================
# CONFIGURACION DE JPA/HIBERNATE
# ==========================================
# Dialecto de Hibernate para PostgreSQL (Ajusta la version si usas una muy especifica de PostgreSQL)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Control de la creacion/actualizacion del esquema de la base de datos por Hibernate:
# 'none': No hacer nada (Recomendado si gestionas el schema manualmente con tu script SQL o herramientas como Flyway/Liquibase).
# 'validate': Validar que el esquema de la BD coincida con las entidades JPA al iniciar. Lanza error si no coinciden. (Bueno para asegurar consistencia).
# 'update': Intenta actualizar el esquema para que coincida con las entidades (Cuidado! Puede causar perdida de datos en algunos casos). Util en desarrollo temprano.
# 'create': Borra y recrea el esquema cada vez que inicia (Util para pruebas, borra todos los datos!).
# 'create-drop': Como 'create', pero borra el esquema al cerrar la aplicacion.
# Dado que tienes un script SQL detallado, 'validate' o 'none' son las opciones mas seguras. Empecemos con 'validate'.
spring.jpa.hibernate.ddl-auto=update

# Mostrar las sentencias SQL generadas por Hibernate en la consola (util para depuracion)
spring.jpa.show-sql=true

# Formatear las sentencias SQL mostradas para que sean mas legibles
spring.jpa.properties.hibernate.format_sql=true

# Configuracion de Open Session In View (OSIV)
# Se recomienda 'false' para evitar problemas de rendimiento y gestionar explicitamente
# la carga perezosa (Lazy Loading) dentro de las transacciones (@Transactional) en la capa de servicio.
spring.jpa.open-in-view=false

# ===============================
# JWT Configuration
# ===============================
# IMPORTANTE! Genera una clave secreta segura y guardala aqui.
# Puedes usar un generador online de claves Base64 o generar una cadena aleatoria larga y luego codificarla a Base64.
# Ejemplo (NO USAR ESTE EN PRODUCCION, GENERA EL TUYO):
app.jwt.secret=VGhpcyBpcyBhIHZlcnkgbG9uZyBhbmQgc2VjdXJlIGJhc2U2NCBlbmNvZGVkIHNlY3JldCBmb3IgSldUIGF0IG15IGNvbXB1dGVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuLi4=
# 24 horas en milisegundos (24 * 60 * 60 * 1000)
app.jwt.expiration-ms=86400000 

# ==========================================
# OTRAS CONFIGURACIONES (Opcional)
# ==========================================
# Nombre de la aplicacion (puede ser util para logs, etc.)
# spring.application.name=MyCheckpointAPI

igdb.api.baseurl=https://api.igdb.com/v4
igdb.api.client-id=4hfbpjabqn0mt84kx7vznu5v32vdm7
igdb.api.authorization=Bearer iylu20gean3byqf1tml8ic9a06j4ct

# Recomendado para Jackson
spring.jackson.deserialization.fail-on-unknown-properties=false
# Para manejar snake_case de IGDB a camelCase de tus DTOs si no usas @JsonProperty en todos lados
spring.jackson.property-naming-strategy=SNAKE_CASE

# ==========================================
# CONFIGURACION DE CORREO (Gmail)
# ==========================================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=mycheckpoint.supp@gmail.com
spring.mail.password=vjhl jgpy qoop dzzb 
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
# spring.mail.properties.mail.smtp.starttls.required=true # Opcional, starttls.enable ya lo implica con Gmail
# spring.mail.properties.mail.debug=true # Util para ver logs detallados de la comunicacion SMTP

# Direccion base de tu API para construir los enlaces de confirmacion
# (Ajusta si tu API corre en un puerto o dominio diferente en desarrollo)
app.api.base-url=http://localhost:8080

logging.level.org.springframework.security=DEBUG

# Configuracion de subida de archivos (Multipart)
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=5MB
spring.servlet.multipart.max-request-size=10MB

# Limite especifico para fotos de perfil (lo usaremos en el codigo)
# Define el tamano en bytes, o usa un formato que parsees tu mismo (ej. "2MB")
# Para simplificar, usaremos bytes directamente o parsearemos MB/KB en el servicio.
# Usemos un formato simple como "2MB" y lo parseamos.
app.profile-picture.max-size=500KB 

# ==========================================
# CONFIGURACION DE SUBIDA DE ARCHIVOS
# ==========================================
# Directorio para guardar las fotos de perfil de los usuarios
# Puedes usar una ruta absoluta en produccion fuera del directorio de la aplicacion
# Por ejemplo: file.upload-dir.profile-pictures=/var/mycheckpoint/profile-pictures/
# Para desarrollo, una ruta relativa puede ser mas sencilla:
file.upload-dir.profile-pictures=./uploads/profile-pictures
# Asegurate de que esta carpeta exista o que la aplicacion tenga permisos para crearla.

# Ruta base para acceder a las imagenes de perfil a traves de HTTP (sin el host)
# Esta debe coincidir con la configuracion de MvcConfig
file.resource-handler.profile-pictures=/profile-pictures/**
file.resource-locations.profile-pictures=file:./uploads/profile-pictures/