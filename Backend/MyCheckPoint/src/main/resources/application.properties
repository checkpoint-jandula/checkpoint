spring.application.name=MyCheckPoint

# ==========================================
# CONFIGURACIÓN DEL SERVIDOR
# ==========================================
# Puerto en el que correrá la aplicación Spring Boot
server.port=8080

# ==========================================
# CONFIGURACIÓN DE LA BASE DE DATOS (PostgreSQL)
# ==========================================
# URL de conexión JDBC para PostgreSQL
# Reemplaza 'localhost', '5432', y 'checkpoint_db' con los valores correctos para tu entorno
# Asegúrate de que la base de datos 'checkpoint_db' exista
spring.datasource.url=jdbc:postgresql://localhost:5432/checkpoint_db

# Nombre de usuario para la conexión a la base de datos
spring.datasource.username=postgres

# Contraseña para la conexión a la base de datos
spring.datasource.password=VHZRTnDlYyOKyBNkSUAWkNlERWCLZFXfgHDyaJEZWGva

# Nombre de la clase del driver JDBC (Spring Boot suele detectarlo, pero es bueno especificarlo)
spring.datasource.driver-class-name=org.postgresql.Driver

# ==========================================
# CONFIGURACIÓN DE JPA/HIBERNATE
# ==========================================
# Dialecto de Hibernate para PostgreSQL (Ajusta la versión si usas una muy específica de PostgreSQL)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Control de la creación/actualización del esquema de la base de datos por Hibernate:
# 'none': No hacer nada (Recomendado si gestionas el schema manualmente con tu script SQL o herramientas como Flyway/Liquibase).
# 'validate': Validar que el esquema de la BD coincida con las entidades JPA al iniciar. Lanza error si no coinciden. (Bueno para asegurar consistencia).
# 'update': Intenta actualizar el esquema para que coincida con las entidades (¡Cuidado! Puede causar pérdida de datos en algunos casos). Útil en desarrollo temprano.
# 'create': Borra y recrea el esquema cada vez que inicia (Útil para pruebas, ¡borra todos los datos!).
# 'create-drop': Como 'create', pero borra el esquema al cerrar la aplicación.
# Dado que tienes un script SQL detallado, 'validate' o 'none' son las opciones más seguras. Empecemos con 'validate'.
spring.jpa.hibernate.ddl-auto=validate

# Mostrar las sentencias SQL generadas por Hibernate en la consola (útil para depuración)
spring.jpa.show-sql=true

# Formatear las sentencias SQL mostradas para que sean más legibles
spring.jpa.properties.hibernate.format_sql=true

# Configuración de Open Session In View (OSIV)
# Se recomienda 'false' para evitar problemas de rendimiento y gestionar explícitamente
# la carga perezosa (Lazy Loading) dentro de las transacciones (@Transactional) en la capa de servicio.
spring.jpa.open-in-view=false

# ==========================================
# CONFIGURACIÓN DE SEGURIDAD (JWT)
# ==========================================
# Clave secreta para firmar los tokens JWT. ¡Debe ser segura y mantenerse confidencial!
# Usa un valor largo y aleatorio. Puedes generarlo con herramientas online o código.
# NO la guardes directamente aquí en producción, usa variables de entorno o Vault.
jwt.secret=ESTA_ES_UNA_CLAVE_SECRETA_MUY_LARGA_Y_SEGURA_QUE_DEBES_CAMBIAR

# Duración de la validez del token JWT en milisegundos (ej: 1 hora = 3600000)
jwt.expiration.ms=3600000

# ==========================================
# OTRAS CONFIGURACIONES (Opcional)
# ==========================================
# Nombre de la aplicación (puede ser útil para logs, etc.)
# spring.application.name=MyCheckpointAPI

# --- Puedes añadir más configuraciones según necesites ---