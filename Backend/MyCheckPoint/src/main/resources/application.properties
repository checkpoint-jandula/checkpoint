spring.application.name=MyCheckPoint

# ==========================================
# CONFIGURACI√ìN DEL SERVIDOR
# ==========================================
# Puerto en el que correr√° la aplicaci√≥n Spring Boot
server.port=8080

# ==========================================
# CONFIGURACI√ìN DE LA BASE DE DATOS (PostgreSQL)
# ==========================================
# URL de conexi√≥n JDBC para PostgreSQL
# Reemplaza 'localhost', '5432', y 'checkpoint_db' con los valores correctos para tu entorno
# Aseg√∫rate de que la base de datos 'checkpoint_db' exista
spring.datasource.url=jdbc:postgresql://localhost:5432/checkpoint_db

# Nombre de usuario para la conexi√≥n a la base de datos
spring.datasource.username=mp

# Contrase√±a para la conexi√≥n a la base de datos
spring.datasource.password=admin

# Spring Boot puede inferir esto, pero es bueno ser explÌcito:
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
# Esta propiedad le dice a Hibernate cÛmo generar SQL especÌfico para PostgreSQL.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# ==========================================
# CONFIGURACI√ìN DE JPA/HIBERNATE
# ==========================================
# Dialecto de Hibernate para PostgreSQL (Ajusta la versi√≥n si usas una muy espec√≠fica de PostgreSQL)
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Control de la creaci√≥n/actualizaci√≥n del esquema de la base de datos por Hibernate:
# 'none': No hacer nada (Recomendado si gestionas el schema manualmente con tu script SQL o herramientas como Flyway/Liquibase).
# 'validate': Validar que el esquema de la BD coincida con las entidades JPA al iniciar. Lanza error si no coinciden. (Bueno para asegurar consistencia).
# 'update': Intenta actualizar el esquema para que coincida con las entidades (¬°Cuidado! Puede causar p√©rdida de datos en algunos casos). √ötil en desarrollo temprano.
# 'create': Borra y recrea el esquema cada vez que inicia (√ötil para pruebas, ¬°borra todos los datos!).
# 'create-drop': Como 'create', pero borra el esquema al cerrar la aplicaci√≥n.
# Dado que tienes un script SQL detallado, 'validate' o 'none' son las opciones m√°s seguras. Empecemos con 'validate'.
spring.jpa.hibernate.ddl-auto=update

# Mostrar las sentencias SQL generadas por Hibernate en la consola (√∫til para depuraci√≥n)
spring.jpa.show-sql=true

# Formatear las sentencias SQL mostradas para que sean m√°s legibles
spring.jpa.properties.hibernate.format_sql=true

# Configuraci√≥n de Open Session In View (OSIV)
# Se recomienda 'false' para evitar problemas de rendimiento y gestionar expl√≠citamente
# la carga perezosa (Lazy Loading) dentro de las transacciones (@Transactional) en la capa de servicio.
spring.jpa.open-in-view=false

# ===============================
# JWT Configuration
# ===============================
# °IMPORTANTE! Genera una clave secreta segura y gu·rdala aquÌ.
# Puedes usar un generador online de claves Base64 o generar una cadena aleatoria larga y luego codificarla a Base64.
# Ejemplo (NO USAR ESTE EN PRODUCCI”N, GENERA EL TUYO):
app.jwt.secret=VGhpcyBpcyBhIHZlcnkgbG9uZyBhbmQgc2VjdXJlIGJhc2U2NCBlbmNvZGVkIHNlY3JldCBmb3IgSldUIGF0IG15IGNvbXB1dGVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuLi4=
# 24 horas en milisegundos (24 * 60 * 60 * 1000)
app.jwt.expiration-ms=86400000 

# ==========================================
# OTRAS CONFIGURACIONES (Opcional)
# ==========================================
# Nombre de la aplicaci√≥n (puede ser √∫til para logs, etc.)
# spring.application.name=MyCheckpointAPI

igdb.api.baseurl=https://api.igdb.com/v4
igdb.api.client-id=4hfbpjabqn0mt84kx7vznu5v32vdm7
igdb.api.authorization=Bearer iylu20gean3byqf1tml8ic9a06j4ct

# Recomendado para Jackson
spring.jackson.deserialization.fail-on-unknown-properties=false
# Para manejar snake_case de IGDB a camelCase de tus DTOs si no usas @JsonProperty en todos lados
spring.jackson.property-naming-strategy=SNAKE_CASE